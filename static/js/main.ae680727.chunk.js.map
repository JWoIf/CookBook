{"version":3,"sources":["Components/SearchBar.js","App.js","serviceWorker.js","index.js"],"names":["Search","Input","SearchBar","props","doSearch","value","term","end","state","vegetarian","vegan","low_fat","search_text","changeParent","axios","get","then","response","setState","recipes","data","hits","length","message","warning","catch","error","console","log","onChange1","e","target","checked","onChange2","onChange3","allergy","className","placeholder","enterButton","size","onSearch","onChange","this","Component","App","field","toggle","index","next","page","current_page","endPage","prev","gluten_free","key","ID","showFirst","showSecond","pics","map","pic","img","recipe","image","link","url","name","label","ingredients","health","diet","fatSat","Math","round","totalNutrients","FASAT","quantity","cal","ENERC_KCAL","fat","FAT","protein","PROCNT","pages","style","div","src","ingredientLines","entries","push","dietLabels","healthLabels","onClick","native","reset","unique","items","from","opacity","transform","enter","leave","config","duration","href","type","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ae680727.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Input, message, Checkbox } from \"antd\";\r\nimport \"antd/dist/antd.css\"\r\n\r\nconst Search = Input.Search;\r\n\r\nexport default class SearchBar extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            recipes:[],\r\n            term: \"\",\r\n            vegan: false,\r\n            vegetarian: false,\r\n            low_fat: false,\r\n            allergy: \"\"\r\n        };\r\n    }\r\n\r\n    // fn for performing Edamam API get requests\r\n\r\n    doSearch = value => {\r\n        let term = value;\r\n        let end = \"\";\r\n        if (this.state.vegetarian) {\r\n            end = end + \"&health=vegetarian\"\r\n        }\r\n        if (this.state.vegan) {\r\n            end = end + \"&health=vegan\"\r\n        }\r\n        if (this.state.low_fat) {\r\n            end = end + \"&health=low-fat\"\r\n        }\r\n        let search_text = \"https://api.edamam.com/search?q=\" + term + \"&app_id=1d13ceac&app_key=8f05b2f0c3e1df482f377b7c8a81f351\" + end\r\n        this.props.changeParent(\"search_text\", search_text)\r\n        this.props.changeParent(\"current_page\", 0)\r\n        axios\r\n            .get(\"https://api.edamam.com/search?q=\" + term + \"&app_id=1d13ceac&app_key=8f05b2f0c3e1df482f377b7c8a81f351\" + end)\r\n            .then(response=> {\r\n                this.setState({\r\n                    recipes: response.data.hits\r\n                });\r\n                this.props.changeParent(\"recipes\", this.state.recipes);\r\n                this.props.changeParent(\"current_page\", 0);\r\n                if(this.state.recipes.length<1){\r\n                    message.warning(\"No results found\");\r\n                }\r\n            })\r\n            .catch(error=>{\r\n                console.log(error)\r\n            })\r\n    };\r\n    onChange1 = e => {\r\n        console.log(`checked = ${e.target.checked}`);\r\n        this.setState({\r\n            low_fat: e.target.checked\r\n        });\r\n    };\r\n\r\n    onChange2 = e => {\r\n        console.log(`checked = ${e.target.checked}`);\r\n        this.setState({\r\n            vegan: e.target.checked\r\n        });\r\n    };\r\n\r\n    onChange3 = e => {\r\n        console.log(`checked = ${e.target.checked}`);\r\n        this.setState({\r\n            vegetarian: e.target.checked\r\n        });\r\n    };\r\n\r\n    \r\n\r\n    render(){\r\n        return(\r\n            <div className = \"SearchBar\">\r\n                <Search\r\n                placeholder=\"Recipe search\"\r\n                enterButton=\"search\"\r\n                size=\"large\"\r\n                onSearch={value => this.doSearch(value)}\r\n                />\r\n                \r\n\r\n                <Checkbox onChange={this.onChange1}>Low-fat</Checkbox>\r\n                <Checkbox onChange={this.onChange2}>Vegan</Checkbox>\r\n                <Checkbox onChange={this.onChange3}>Vegetarian</Checkbox>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\nimport axios from 'axios';\nimport { Button , message } from \"antd\";\nimport './App.css';\nimport SearchBar from \"./Components/SearchBar.js\";\nimport \"antd/dist/antd.css\";\nimport { Transition, animated } from 'react-spring/renderprops'\n\n\n\nclass App extends React.Component {\n  constructor(){\n    super();\n    this.state={\n      recipes: [],\n      vegan: false,\n      vegetarian: false,\n      gluten_free: false,\n      allergy: \"\",\n      current_page: 0,\n      search_text: \"\",\n      key: \"8f05b2f0c3e1df482f377b7c8a81f351\",\n      ID: \"1d13ceac\",\n      showFirst: true,\n      showSecond: false,\n      index: 0\n    }\n  }\n\n  changeParent= (field,value) => {\n    this.setState({\n      [field]:value\n    });\n  };\n\n  toggle = e =>\n    this.setState(state => ({\n      index: state.index === 1 ? 0 : state.index + 1,\n    }))\n\n  next=() => {\n    if (this.state.recipes.length > 0) {\n      let page = this.state.current_page + 10\n      let endPage = this.state.current_page + 21\n      axios \n            .get(this.state.search_text + \"&from=\" + page + \"&to=\" + endPage)\n            .then(response=> {\n                this.setState({\n                    recipes: response.data.hits,\n                    current_page: page\n                });\n                if(this.state.recipes.length<1){\n                  message.warning(\"No results found\");\n              }\n          })\n          .catch(error=>{\n              console.log(error)\n          })\n    }\n  }\n\n  prev=() => {\n    if (this.state.current_page > 9) {\n      let page = this.state.current_page - 10\n      let endPage = this.state.current_page + 1\n      axios \n            .get(this.state.search_text + \"&from=\" + page + \"&to=\" + endPage)\n            .then(response=> {\n                this.setState({\n                    recipes: response.data.hits,\n                    current_page: page\n                });\n                if(this.state.recipes.length<1){\n                  message.warning(\"No results found\");\n              }\n          })\n          .catch(error=>{\n              console.log(error)\n          })\n      }\n    }\n\n\n\n  render(){\n    let pics = this.state.recipes.map(pic=>{\n        let img = pic.recipe.image;\n        let link = pic.recipe.url;\n        let name = pic.recipe.label;\n        let ingredients = [];\n        let health = [];\n        let diet = [];\n        let fatSat = Math.round(pic.recipe.totalNutrients.FASAT.quantity);\n        let cal = Math.round(pic.recipe.totalNutrients.ENERC_KCAL.quantity);\n        let fat = Math.round(pic.recipe.totalNutrients.FAT.quantity);\n        let protein = Math.round(pic.recipe.totalNutrients.PROCNT.quantity)\n        \n        const pages = [\n          style => (\n            <animated.div style={{ ...style}}>\n              <div className=\"contentBox\">\n                      \n                <img src={img} className=\"Images\"></img>\n          \n                <tr className = \"table\">\n                  <thead>\n                   Ingredients\n                  </thead>\n                  <tbody>{ingredients}</tbody>\n                </tr>\n              </div></animated.div>),\n\n          style => (\n            <animated.div style={{ ...style}}><div className=\"contentBox\">\n            <img src={img} className=\"Images\"></img>\n            <tr className=\"table2\">\n            <thead>\n              Nutrition Facts\n            </thead>\n            <tbody>\n              <h3>Calories: {cal}</h3>\n            <h3>Fat: {fat}g</h3>\n            <h3>Saturated Fat: {fatSat}g</h3>\n            <h3>Protein: {protein}g</h3>\n            </tbody>\n            </tr>\n              <tr className = \"table2\">\n                <thead>\n                  Diet Labels\n                </thead>\n                <tbody><h3>{diet}</h3></tbody>\n                <thead>\n                  Health Labels\n                </thead>\n                <tbody><h3>{health}</h3></tbody>\n              </tr>\n            </div>\n            </animated.div>)\n        ]\n\n        for (const [index, value] of  pic.recipe.ingredientLines.entries()) {\n          ingredients.push(<li key={index}>{value}</li>)\n        }\n        for (const [index, value] of  pic.recipe.dietLabels.entries()) {\n          diet.push(<li key={index}>{value}</li>)\n        }\n        for (const [index, value] of  pic.recipe.healthLabels.entries()) {\n          health.push(<li key={index}>{value}</li>)\n        }\n\n        return(\n          <div className=\"wholeRecipe\">\n            <div>\n              <h1>{name}</h1>\n            </div>\n            <div className=\"main\" onClick={this.toggle}>\n              <Transition\n                native\n                reset\n                unique\n                items={this.state.index}\n                from={{ opacity: 0, transform: 'translate3d(100%,0,0)' }}\n                enter={{ opacity: 1, transform: 'translate3d(0%,0,0)' }}\n                leave={{ opacity: 0, transform: 'translate3d(-100%,0,0)' }}\n                config={{ duration: 500}}>\n                {index => pages[index]}\n              </Transition>\n            </div>\n            <div>\n              <a href={link} target=\"_blank\">\n              <Button type=\"primary\" className=\"button\">Full Recipe</Button>\n              </a>\n            </div>\n          </div>\n        )\n    })\n\n    return(\n      <div className=\"App\">\n        <header>\n        <SearchBar\n          changeParent={this.changeParent}>\n          </SearchBar>\n          \n        <img src=\"http://clipart-library.com/img/1695183.png\" className=\"logo\"></img>\n        <h1 className=\"Title\">The Cookbook</h1>\n        </header>\n        <div>\n          <hr></hr>\n          {pics}   \n        </div>\n        <footer>\n          <Button type=\"primary\" className=\"np\" onClick={() => this.prev(this.state.current_page)}>\n            Previous\n          </Button>\n          <Button type=\"primary\" className=\"np\"onClick={()=> this.next(this.state.current_page)}>\n            Next\n          </Button>\n        </footer>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}